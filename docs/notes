Development Notes
=================


Console Commands =>
    'help': 'display this menu',
    'quit': 'exit the console',
    'exit': 'exit the console',
    'exec': 'execute os command',
    'about': 'display basic information',
    'clear': 'clears the screen',
    'config sources': 'manage osint sources',
    'config keywords': 'manage your keywords',
    'config syslog': 'manage siem syslog settings',
    'modules': 'list all collection module information',
    'keywords': 'show loaded keywords',
    'start all': 'start all available modules',
    'stop all': 'stop all running modules',
    'start <module>': 'launch the selected module',
    'stop <module>': 'stop the selected module',
    'info tasks': 'view stats on running and queued tasks',
    'info reactor': 'view general ArcReactor stats',
    'data <module>': 'view information on data collected by module',
    'dashboard': 'launch web dashboard [experimental]'

=====================================================================================


def daemonize(no_close=False, pidfile=None):
    """
    Convert the calling process into a daemon. To make the current Python
    process into a daemon process, you need two lines of code:

    .. python::

        from grizzled.os import daemonize
        daemonize.daemonize()

    If ``daemonize()`` fails for any reason, it throws a ``DaemonError``,
    which is a subclass of the standard ``OSError`` exception. also logs debug
    messages, using the standard Python ``logging`` package, to channel
    "grizzled.os.daemon".

    **Adapted from:** http://software.clapper.org/daemonize/

    **See Also:**

    - Stevens, W. Richard. *Unix Network Programming* (Addison-Wesley, 1990).

    :Parameters:
        no_close : bool
            If ``True``, don't close the file descriptors. Useful if the
            calling process has already redirected file descriptors to an
            output file. **Warning**: Only set this parameter to ``True`` if
            you're *sure* there are no open file descriptors to the calling
            terminal. Otherwise, you'll risk having the daemon re-acquire a
            control terminal, which can cause it to be killed if someone logs
            off that terminal.

        pidfile : str
            Path to file to which to write daemon's process ID. The string may
            contain a ``${pid}`` token, which is replaced with the process ID
            of the daemon. e.g.: ``/var/run/myserver-${pid}``

    :raise DaemonError: Error during daemonizing
    """
    log = logging.getLogger('grizzled.os.daemon')

    def __fork():
        try:
            return _os.fork()
        except OSError, e:
            raise DaemonError, ('Cannot fork', e.errno, e.strerror)

    def __redirect_file_descriptors():
        import resource  # POSIX resource information
        maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
        if maxfd == resource.RLIM_INFINITY:
            maxfd = MAXFD

        # Close all file descriptors.

        for fd in range(0, maxfd):
            # Only close TTYs.
            try:
                _os.ttyname(fd)
            except:
                continue

            try:
                _os.close(fd)
            except OSError:
                # File descriptor wasn't open. Ignore.
                pass

            # Redirect standard input, output and error to something safe.
            # os.open() is guaranteed to return the lowest available file
            # descriptor (0, or standard input). Then, we can dup that
            # descriptor for standard output and standard error.

            _os.open(NULL_DEVICE, _os.O_RDWR)
            _os.dup2(0, 1)
            _os.dup2(0, 2)


    if _os.name != 'posix':
        import errno
        raise DaemonError, \
              ('daemonize() is only supported on Posix-compliant systems.',
               errno.ENOSYS, _os.strerror(errno.ENOSYS))

    try:
        # Fork once to go into the background.

        log.debug('Forking first child.')
        pid = __fork()
        if pid != 0:
            # Parent. Exit using os._exit(), which doesn't fire any atexit
            # functions.
            _os._exit(0)

        # First child. Create a new session. os.setsid() creates the session
        # and makes this (child) process the process group leader. The process
        # is guaranteed not to have a control terminal.
        log.debug('Creating new session')
        _os.setsid()

        # Fork a second child to ensure that the daemon never reacquires
        # a control terminal.
        log.debug('Forking second child.')
        pid = __fork()
        if pid != 0:
            # Original child. Exit.
            _os._exit(0)

        # This is the second child. Set the umask.
        log.debug('Setting umask')
        _os.umask(UMASK)

        # Go to a neutral corner (i.e., the primary file system, so
        # the daemon doesn't prevent some other file system from being
        # unmounted).
        log.debug('Changing working directory to "%s"' % WORKDIR)
        _os.chdir(WORKDIR)

        # Unless no_close was specified, close all file descriptors.
        if not no_close:
            log.debug('Redirecting file descriptors')
            __redirect_file_descriptors()

        if pidfile:
            from string import Template
            t = Template(pidfile)
            pidfile = t.safe_substitute(pid=str(_os.getpid()))
            open(pidfile, 'w').write(str(_os.getpid()) + '\n')

    except DaemonError:
        raise

    except OSError, e:
        raise DaemonError, ('Unable to daemonize()', e.errno, e.strerror)

=============================================

#!/usr/bin/env python
# encoding: utf-8
"""Sending log output to a file and the console at the same time.
"""

import logging
import logging.handlers
import sys

# Log verbosely
root_logger = logging.getLogger('')
root_logger.setLevel(logging.DEBUG)

# Set up console output to stderr
console = logging.StreamHandler(sys.stderr)
console_format = '%(message)s'
console.setFormatter(logging.Formatter(console_format))
console.setLevel(logging.INFO) # TODO: command line switch
root_logger.addHandler(console)

# Include debug messages when logging to a file
file_handler = logging.handlers.RotatingFileHandler(
    'logging_example.log', # use a full path
    )
file_format = '%(asctime)s %(levelname)6s %(name)s %(message)s'
file_handler.setFormatter(logging.Formatter(file_format))
file_handler.setLevel(logging.DEBUG)
root_logger.addHandler(file_handler)

# Log sample messages with different levels
log = logging.getLogger(__name__)
log.info('on the console and in the file')
log.debug('only in the file')
log.error('simple error message')

# Replace excepthook with logger
def log_exception(exc_type, exc_value, traceback):
    logging.getLogger(__name__).error(exc_value)
sys.excepthook = log_exception

# Send exceptions to the logger automatically
raise RuntimeError('failure message')
